/**
 *
 */
package org.n52.udig.catalog.internal.sos.dataStore;

import java.util.List;

import javax.units.Unit;

import org.geotools.feature.AttributeType;
import org.geotools.feature.AttributeTypeFactory;
import org.geotools.feature.Feature;
import org.geotools.feature.FeatureType;
import org.geotools.feature.FeatureTypeBuilder;
import org.geotools.measure.Measure;

import org.n52.oxf.feature.OXFFeature;
import org.n52.oxf.feature.OXFFeatureCollection;
import org.n52.oxf.feature.OXFFeatureType;
import org.n52.oxf.feature.dataTypes.IObservationResult;
import org.n52.oxf.feature.dataTypes.OXFMeasureType;
import org.n52.oxf.feature.dataTypes.OXFPhenomenonPropertyType;
import org.n52.oxf.feature.dataTypes.OXFScopedName;
import org.opengis.feature.FeatureAttributeDescriptor;

/**
 * @author 52n
 *
 */
public class OXFFeatureConverter {


	public static Feature convert(final OXFFeature oxffeature) {
		boolean isGeometrySet = false;
		// oxffeature.getSpecifiedAttributes()
		// Object attributes[] = new
		// Object[oxffeature.getSpecifiedAttributes().length];
		final Object attributes[] = new Object[oxffeature.getFeatureType()
		                 				.getAttributeDescriptors().size()];

		// for (FeatureAttributeDescriptor
		// fad:oxffeature.getFeatureType().getAttributeDescriptors()) {
		// attributes[i] = oxffeature.getAttribute(fad.getName());
		// }

		Feature f = null;

//		// TODO DIRTY
		try {
			// udig does not allow different features with equalID
			// drop OXFdefaultID and use a unique id generated by udig
			if (oxffeature.getID().equals("anyID")) {
				f = convert(oxffeature.getFeatureType()).create(attributes);
			} else {
				f = convert(oxffeature.getFeatureType()).create(attributes,
						oxffeature.getID());
			}

			if (oxffeature.getGeometry() != null) {
				f.setDefaultGeometry(oxffeature.getGeometry());
				isGeometrySet = true;
			}

			for (int j = 0; j < attributes.length; j++) {
				final String name = f.getFeatureType().getAttributeType(j).getName();
				
				// TODO try to find a useable geometry
				// at first check attributes with
				// com.vividsolutions.jts.geom.Geometry.class
				// check featureofinterest
				// XXX workaround: today i know where the geometries are stored
				// f.setDefaultGeometry(((OXFFeature)oxffeature.getAttribute("featureOfInterest")).getGeometry());
				if (!isGeometrySet && name.equals("featureOfInterest")) {
					f.setDefaultGeometry(((OXFFeature) oxffeature
							.getAttribute("featureOfInterest")).getGeometry());
					isGeometrySet = true;
				}
				final AttributeType at = f.getFeatureType().getAttributeType(j);
				if (at.getType().isAssignableFrom(Feature.class)) {
					f.setAttribute(j, convert((OXFFeature) oxffeature
							.getAttribute(name)));
//				} else if (at.getType().isAssignableFrom(Measure.class)){
//					if(oxffeature.getFeatureType().getAttributeDescriptor(name).getObjectClass().isAssignableFrom(OXFMeasureType.class)) {
//						OXFMeasureType oxftmt = ((OXFMeasureType)oxffeature.getAttribute(name));
//						f.setAttribute(j,new Measure(oxftmt.getValue(),Unit.searchSymbol(oxftmt.getUomIdentifier())));
//					}
//					if(oxffeature.getFeatureType().getAttributeDescriptor(name).getObjectClass().isAssignableFrom(OXFPhenomenonPropertyType.class)) {
//						OXFPhenomenonPropertyType oxfppt = ((OXFPhenomenonPropertyType)oxffeature.getAttribute(name));
//						f.setAttribute(j,new Measure(oxfppt.getURN(),Unit.searchSymbol(oxfppt.getUomIdentifier())));
//					}
//					if(oxffeature.getFeatureType().getAttributeDescriptor(name).getObjectClass().isAssignableFrom(OXFScopedName.class)) {
//						OXFScopedName oxfsn = ((OXFScopedName)oxffeature.getAttribute(name));
//						f.setAttribute(j,new Measure(oxfsn.getValue(),Unit.searchSymbol(oxfsn.getCodeSpace())));
//					} 
					
				} else if (at.getType().isAssignableFrom(
						com.vividsolutions.jts.geom.Geometry.class)) {
					if (oxffeature.getAttribute(name) != null) {
						f.setAttribute(
								j,
								(oxffeature
										.getAttribute(name)));
						// place where geometries could be stored
						if (!isGeometrySet) {
							f
									.setDefaultGeometry(((com.vividsolutions.jts.geom.Geometry) oxffeature
											.getAttribute(name)));
							isGeometrySet = true;
						}
					}
				} else {
					f.setAttribute(j, oxffeature.getAttribute(name));
				}
			}
		} catch (final Exception e) {
			e.printStackTrace();
		}
		return f;
	}

	private static FeatureType convert(final OXFFeatureType oxfft,
			final FeatureTypeBuilder build) {
		try {

			// build.setName(oxfft.getTypeName());

			final List<FeatureAttributeDescriptor> oxffads = oxfft
					.getAttributeDescriptors();

			for (final FeatureAttributeDescriptor oxffad : oxffads) {
				 System.out.println(oxffad.getObjectClass().toString());
				 boolean nillable = true;
//					if (oxffad.getMinimumOccurrences()>0){
//						nillable = false;
//					}
				// a feature ii a feature ... this has to be a feature
				if (oxffad.getObjectClass().isAssignableFrom(OXFFeature.class)) {
					build.addType(AttributeTypeFactory.newAttributeType(oxffad
							.getName(), Feature.class, nillable));
				} 
//					else if(oxffad.getObjectClass().isAssignableFrom(OXFMeasureType.class)) {
//					build.addType(AttributeTypeFactory.newAttributeType(oxffad
//							.getName(), Measure.class, nillable));
//				}else if(oxffad.getObjectClass().isAssignableFrom(OXFPhenomenonPropertyType.class)) {
//					build.addType(AttributeTypeFactory.newAttributeType(oxffad
//							.getName(), Measure.class, nillable));
//				}
//				else if(oxffad.getObjectClass().isAssignableFrom(OXFScopedName.class)) {
//					build.addType(AttributeTypeFactory.newAttributeType(oxffad
//							.getName(), Measure.class, nillable));
//				}
				
				
				else {
					
					build.addType(AttributeTypeFactory.newAttributeType(oxffad
							.getName(), oxffad.getObjectClass(), nillable));
				}

			}
			return build.getFeatureType();
		} catch (final Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	public static FeatureType convert(final OXFFeatureType oxfft) {
		final String typeName = oxfft.getTypeName();
		final FeatureTypeBuilder build = FeatureTypeBuilder.newInstance(typeName);
		return convert(oxfft, build);
	}

	public static FeatureType createFeatureType(final OXFFeatureCollection oxffc,
			final String typename) {
		try {

			final OXFFeatureType oxfft = oxffc.toList().get(0).getFeatureType();
			FeatureTypeBuilder build;
			if (typename == null) {
				build = FeatureTypeBuilder.newInstance(oxfft.getTypeName());
			} else {
				build = FeatureTypeBuilder.newInstance(typename);
			}

			convert(oxfft, build);

			final FeatureType ft = build.getFeatureType();

			return ft;

		} catch (final Exception e) {
			e.printStackTrace();
		}
		return null;
		// build.setDefaultGeometry(defaultGeometry)
	}
}
